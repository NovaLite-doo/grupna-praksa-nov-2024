//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.1.0.0 (NJsonSchema v11.0.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface IExamClient {
    generateExam(command: CreateExamCommand): Observable<FileResponse>;
    getExamById(examId: number): Observable<GetExamByIdResponse>;
    submitExam(command: SubmitExamCommand): Observable<FileResponse>;
}

@Injectable({
    providedIn: 'root'
})
export class ExamClient implements IExamClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "https://localhost:7296";
    }

    generateExam(command: CreateExamCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/exams";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGenerateExam(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGenerateExam(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processGenerateExam(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getExamById(examId: number): Observable<GetExamByIdResponse> {
        let url_ = this.baseUrl + "/exams/{examId}";
        if (examId === undefined || examId === null)
            throw new Error("The parameter 'examId' must be defined.");
        url_ = url_.replace("{examId}", encodeURIComponent("" + examId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetExamById(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetExamById(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<GetExamByIdResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<GetExamByIdResponse>;
        }));
    }

    protected processGetExamById(response: HttpResponseBase): Observable<GetExamByIdResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetExamByIdResponse.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    submitExam(command: SubmitExamCommand): Observable<FileResponse> {
        let url_ = this.baseUrl + "/exams/submit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSubmitExam(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSubmitExam(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processSubmitExam(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class CreateExamCommand implements ICreateExamCommand {
    email?: string;
    faculty?: string;
    major?: string;
    name?: string;
    surname?: string;
    yearOfStudy?: YearOfStudy;

    constructor(data?: ICreateExamCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.email = _data["email"];
            this.faculty = _data["faculty"];
            this.major = _data["major"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.yearOfStudy = _data["yearOfStudy"];
        }
    }

    static fromJS(data: any): CreateExamCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateExamCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["email"] = this.email;
        data["faculty"] = this.faculty;
        data["major"] = this.major;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["yearOfStudy"] = this.yearOfStudy;
        return data;
    }
}

export interface ICreateExamCommand {
    email?: string;
    faculty?: string;
    major?: string;
    name?: string;
    surname?: string;
    yearOfStudy?: YearOfStudy;
}

export enum YearOfStudy {
    YearOne = 0,
    YearTwo = 1,
    YearThree = 2,
    YearFour = 3,
    Master = 4,
}

export class GetExamByIdResponse implements IGetExamByIdResponse {
    id?: number;
    questions?: GetExamByIdExamQuestionDto[];

    constructor(data?: IGetExamByIdResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["questions"])) {
                this.questions = [] as any;
                for (let item of _data["questions"])
                    this.questions!.push(GetExamByIdExamQuestionDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetExamByIdResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetExamByIdResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.questions)) {
            data["questions"] = [];
            for (let item of this.questions)
                data["questions"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetExamByIdResponse {
    id?: number;
    questions?: GetExamByIdExamQuestionDto[];
}

export class GetExamByIdExamQuestionDto implements IGetExamByIdExamQuestionDto {
    id?: number;
    examId?: number;
    questionId?: number;
    text?: string;
    type?: QuestionType;
    answers?: GetExamByIdAnswerDto[];

    constructor(data?: IGetExamByIdExamQuestionDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.examId = _data["examId"];
            this.questionId = _data["questionId"];
            this.text = _data["text"];
            this.type = _data["type"];
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(GetExamByIdAnswerDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetExamByIdExamQuestionDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExamByIdExamQuestionDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["examId"] = this.examId;
        data["questionId"] = this.questionId;
        data["text"] = this.text;
        data["type"] = this.type;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetExamByIdExamQuestionDto {
    id?: number;
    examId?: number;
    questionId?: number;
    text?: string;
    type?: QuestionType;
    answers?: GetExamByIdAnswerDto[];
}

export enum QuestionType {
    Radiobutton = 0,
    Checkbox = 1,
}

export class GetExamByIdAnswerDto implements IGetExamByIdAnswerDto {
    id?: number;
    text?: string;
    isCorrect?: boolean;

    constructor(data?: IGetExamByIdAnswerDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
            this.isCorrect = _data["isCorrect"];
        }
    }

    static fromJS(data: any): GetExamByIdAnswerDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetExamByIdAnswerDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        data["isCorrect"] = this.isCorrect;
        return data;
    }
}

export interface IGetExamByIdAnswerDto {
    id?: number;
    text?: string;
    isCorrect?: boolean;
}

export class SubmitExamCommand implements ISubmitExamCommand {
    examId?: number;
    examQuestions?: SubmitExamExamQuestionDTO[];

    constructor(data?: ISubmitExamCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.examId = _data["examId"];
            if (Array.isArray(_data["examQuestions"])) {
                this.examQuestions = [] as any;
                for (let item of _data["examQuestions"])
                    this.examQuestions!.push(SubmitExamExamQuestionDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitExamCommand {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitExamCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["examId"] = this.examId;
        if (Array.isArray(this.examQuestions)) {
            data["examQuestions"] = [];
            for (let item of this.examQuestions)
                data["examQuestions"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISubmitExamCommand {
    examId?: number;
    examQuestions?: SubmitExamExamQuestionDTO[];
}

export class SubmitExamExamQuestionDTO implements ISubmitExamExamQuestionDTO {
    id?: number;
    submittedAnswers?: Answer[];

    constructor(data?: ISubmitExamExamQuestionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["submittedAnswers"])) {
                this.submittedAnswers = [] as any;
                for (let item of _data["submittedAnswers"])
                    this.submittedAnswers!.push(Answer.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SubmitExamExamQuestionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SubmitExamExamQuestionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.submittedAnswers)) {
            data["submittedAnswers"] = [];
            for (let item of this.submittedAnswers)
                data["submittedAnswers"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISubmitExamExamQuestionDTO {
    id?: number;
    submittedAnswers?: Answer[];
}

export class Answer implements IAnswer {
    id?: number;
    text?: string;
    isCorrect?: boolean;
    questionId?: number;
    question?: Question;

    constructor(data?: IAnswer) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
            this.isCorrect = _data["isCorrect"];
            this.questionId = _data["questionId"];
            this.question = _data["question"] ? Question.fromJS(_data["question"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Answer {
        data = typeof data === 'object' ? data : {};
        let result = new Answer();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        data["isCorrect"] = this.isCorrect;
        data["questionId"] = this.questionId;
        data["question"] = this.question ? this.question.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAnswer {
    id?: number;
    text?: string;
    isCorrect?: boolean;
    questionId?: number;
    question?: Question;
}

export class Question implements IQuestion {
    id?: number;
    text?: string;
    answers?: Answer[];
    category?: QuestionCategory;
    type?: QuestionType;
    isDeleted?: boolean;

    constructor(data?: IQuestion) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.text = _data["text"];
            if (Array.isArray(_data["answers"])) {
                this.answers = [] as any;
                for (let item of _data["answers"])
                    this.answers!.push(Answer.fromJS(item));
            }
            this.category = _data["category"];
            this.type = _data["type"];
            this.isDeleted = _data["isDeleted"];
        }
    }

    static fromJS(data: any): Question {
        data = typeof data === 'object' ? data : {};
        let result = new Question();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["text"] = this.text;
        if (Array.isArray(this.answers)) {
            data["answers"] = [];
            for (let item of this.answers)
                data["answers"].push(item.toJSON());
        }
        data["category"] = this.category;
        data["type"] = this.type;
        data["isDeleted"] = this.isDeleted;
        return data;
    }
}

export interface IQuestion {
    id?: number;
    text?: string;
    answers?: Answer[];
    category?: QuestionCategory;
    type?: QuestionType;
    isDeleted?: boolean;
}

export enum QuestionCategory {
    OOP = 0,
    GIT = 1,
    SQL = 2,
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}